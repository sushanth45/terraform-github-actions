# This is a basic workflow to help you get started with Actions

name: 'Terraform'

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
      # terraform_version: 0.13.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
   - name: Terraform Format
     id: fmt
     run: terraform fmt -check
   - name: Terraform Init
     id: init
     run: terraform init
   - name: Terraform Plan
     id: plan
     if: github.event_name == 'pull_request'
     run: terraform plan -no-color
     continue-on-error: true
   - name: Update Pull Request
     uses: actions/github-script@0.9.0
     if: github.event_name == 'pull_request'
     env:
     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
     with:
     github-token: ${{ secrets.GITHUB_TOKEN }}
     script: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>
        \`\`\`${process.env.PLAN}\`\`\`
        </details>
        *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

        github.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
  - name: Terraform Plan Status
    if: steps.plan.outcome == 'failure'
    run: exit 1
  - name: Terraform Apply
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    run: terraform apply -auto-approve

  
   

  

